#
# Autogenerated by Thrift Compiler (0.18.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def login(self, userLoginName, password, longSession):
        """
        Parameters:
         - userLoginName
         - password
         - longSession

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def login(self, userLoginName, password, longSession):
        """
        Parameters:
         - userLoginName
         - password
         - longSession

        """
        self.send_login(userLoginName, password, longSession)
        return self.recv_login()

    def send_login(self, userLoginName, password, longSession):
        self._oprot.writeMessageBegin('login', TMessageType.CALL, self._seqid)
        args = login_args()
        args.userLoginName = userLoginName
        args.password = password
        args.longSession = longSession
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_login(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = login_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.bre is not None:
            raise result.bre
        if result.bse is not None:
            raise result.bse
        if result.ise is not None:
            raise result.ise
        if result.ade is not None:
            raise result.ade
        if result.ule is not None:
            raise result.ule
        if result.tne is not None:
            raise result.tne
        if result.lfe is not None:
            raise result.lfe
        raise TApplicationException(TApplicationException.MISSING_RESULT, "login failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["login"] = Processor.process_login
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_login(self, seqid, iprot, oprot):
        args = login_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = login_result()
        try:
            result.success = self._handler.login(args.userLoginName, args.password, args.longSession)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BadRequest as bre:
            msg_type = TMessageType.REPLY
            result.bre = bre
        except Busy as bse:
            msg_type = TMessageType.REPLY
            result.bse = bse
        except InternalServerError as ise:
            msg_type = TMessageType.REPLY
            result.ise = ise
        except AccessDenied as ade:
            msg_type = TMessageType.REPLY
            result.ade = ade
        except UserLicenseExpired as ule:
            msg_type = TMessageType.REPLY
            result.ule = ule
        except TrialIsNotActivated as tne:
            msg_type = TMessageType.REPLY
            result.tne = tne
        except LoginFailed as lfe:
            msg_type = TMessageType.REPLY
            result.lfe = lfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("login", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class login_args(object):
    """
    Attributes:
     - userLoginName
     - password
     - longSession

    """


    def __init__(self, userLoginName=None, password=None, longSession=None,):
        self.userLoginName = userLoginName
        self.password = password
        self.longSession = longSession

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userLoginName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.longSession = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('login_args')
        if self.userLoginName is not None:
            oprot.writeFieldBegin('userLoginName', TType.STRING, 1)
            oprot.writeString(self.userLoginName.encode('utf-8') if sys.version_info[0] == 2 else self.userLoginName)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.longSession is not None:
            oprot.writeFieldBegin('longSession', TType.BOOL, 3)
            oprot.writeBool(self.longSession)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(login_args)
login_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userLoginName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'longSession', None, None, ),  # 3
)


class login_result(object):
    """
    Attributes:
     - success
     - bre
     - bse
     - ise
     - ade
     - ule
     - tne
     - lfe

    """


    def __init__(self, success=None, bre=None, bse=None, ise=None, ade=None, ule=None, tne=None, lfe=None,):
        self.success = success
        self.bre = bre
        self.bse = bse
        self.ise = ise
        self.ade = ade
        self.ule = ule
        self.tne = tne
        self.lfe = lfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Session()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.bre = BadRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bse = Busy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ise = InternalServerError.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.ade = AccessDenied.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.ule = UserLicenseExpired.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.tne = TrialIsNotActivated.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.lfe = LoginFailed.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('login_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.bre is not None:
            oprot.writeFieldBegin('bre', TType.STRUCT, 1)
            self.bre.write(oprot)
            oprot.writeFieldEnd()
        if self.bse is not None:
            oprot.writeFieldBegin('bse', TType.STRUCT, 2)
            self.bse.write(oprot)
            oprot.writeFieldEnd()
        if self.ise is not None:
            oprot.writeFieldBegin('ise', TType.STRUCT, 3)
            self.ise.write(oprot)
            oprot.writeFieldEnd()
        if self.ade is not None:
            oprot.writeFieldBegin('ade', TType.STRUCT, 4)
            self.ade.write(oprot)
            oprot.writeFieldEnd()
        if self.ule is not None:
            oprot.writeFieldBegin('ule', TType.STRUCT, 5)
            self.ule.write(oprot)
            oprot.writeFieldEnd()
        if self.tne is not None:
            oprot.writeFieldBegin('tne', TType.STRUCT, 6)
            self.tne.write(oprot)
            oprot.writeFieldEnd()
        if self.lfe is not None:
            oprot.writeFieldBegin('lfe', TType.STRUCT, 7)
            self.lfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(login_result)
login_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Session, None], None, ),  # 0
    (1, TType.STRUCT, 'bre', [BadRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'bse', [Busy, None], None, ),  # 2
    (3, TType.STRUCT, 'ise', [InternalServerError, None], None, ),  # 3
    (4, TType.STRUCT, 'ade', [AccessDenied, None], None, ),  # 4
    (5, TType.STRUCT, 'ule', [UserLicenseExpired, None], None, ),  # 5
    (6, TType.STRUCT, 'tne', [TrialIsNotActivated, None], None, ),  # 6
    (7, TType.STRUCT, 'lfe', [LoginFailed, None], None, ),  # 7
)
fix_spec(all_structs)
del all_structs
